
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;


public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
       BufferedImage myImage;
        try {
            myImage = ImageIO.read(new File("wintry.png"));
            this.setContentPane(new ImagePanel(myImage));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        // elsewhere
        
         initComponents();
    }
    
    class ImagePanel extends JComponent {
        private Image image;
        public ImagePanel(Image image) {
            this.image = image;
        }
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(image, 0, 0, this);
        }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 400));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon("Images/snowman.png"));
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 260, 76, 86);
        jLabel1.setLocation(300, 260);

        jLabel3.setIcon(new javax.swing.ImageIcon("Images/snowflake2.png"));
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(190, 40, 40, 50);
        jLabel3.setLocation(400, 10);

        jLabel2.setIcon(new javax.swing.ImageIcon("Images/snowflake1.png"));
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 40, 40, 50);
        jLabel2.setLocation(200, 10);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel4.setForeground(java.awt.Color.red);
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("GAME OVER");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(200, 150, 300, 70);
        jLabel4.setVisible(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Score : "+snowMan.snowflakesCatched);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jLabel5.setVisible(true);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(580, 310, 90, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
//        System.out.println(evt.getKeyChar());        
        if(isGameOver) return;
        if(evt.getKeyCode() == 37) { // Left         
            this.snowMan.moveLeft();
            jLabel1.setLocation(this.snowMan.x, this.snowMan.y);
        } else if(evt.getKeyCode() == 39) { // Right
            this.snowMan.moveRight();
            jLabel1.setLocation(this.snowMan.x, this.snowMan.y);
        }      
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void showGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        final MainWindow window = new MainWindow();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                window = new MainWindow();
                window.setVisible(true);
            }
        });
        
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
        
            @Override
            public void run() {
                window.moveSnowFlakes();
            }
          }, 0, 500);

          // Since Java-8
//        timer.scheduleAtFixedRate(() -> , 2*60*1000, 2*60*1000);
    }
    
    SnowMan snowMan = new SnowMan(300, 260, this);
    SnowFlake snow1 = new SnowFlake(400, 0);
    SnowFlake snow2 = new SnowFlake(200, 0);
    
    boolean isGameOver = false;
    
    public void gameOver() {
        isGameOver = true;
        jLabel4.setVisible(isGameOver);
    }
    
    public void moveSnowFlakes() {
        if(isGameOver) return;
        snow1.fall();
        snow2.fall();
        
        // 330 is last y
        Rectangle snowManRect = new Rectangle(snowMan.x,snowMan.y,jLabel1.getWidth(),jLabel1.getHeight());
        Rectangle snow1Rect = new Rectangle(snow1.x,snow1.y,jLabel3.getWidth(),jLabel3.getHeight());
        Rectangle snow2Rect = new Rectangle(snow2.x,snow2.y,jLabel2.getWidth(),jLabel2.getHeight());
        
        // Assuming there is an intersect method, otherwise just handcompare the values
        if (snowManRect.intersects(snow1Rect)) {
            int randomNum = ThreadLocalRandom.current().nextInt(10, 400 + 1);
            snow1.reset(randomNum);
            snowMan.catchSnowflake();
            jLabel5.setText("Score: "+snowMan.snowflakesCatched);
        }
        
        if (snowManRect.intersects(snow2Rect)) {
            int randomNum = ThreadLocalRandom.current().nextInt(10, 400 + 1);
            snow2.reset(randomNum);
            snowMan.catchSnowflake();
            jLabel5.setText("Score: "+snowMan.snowflakesCatched);
        }
        
        if (snow1.y >= 330) {
            int randomNum = ThreadLocalRandom.current().nextInt(10, 400 + 1);
            snow1.reset(randomNum);
            snowMan.missSnowflake();
        }
        
        if (snow2.y >= 330) {
            int randomNum = ThreadLocalRandom.current().nextInt(10, 400 + 1);
            snow2.reset(randomNum);
            snowMan.missSnowflake();
        }
        
        jLabel3.setLocation(snow1.x, snow1.y);
        jLabel2.setLocation(snow2.x, snow2.y);
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

 public static void main(String[] args) {
        MainWindow.showGUI();
    }
}


class JPictureBox extends JComponent {

    private Icon icon = null;
    private final Dimension dimension = new Dimension(100, 100);
    private Image image = null;
    private ImageIcon ii = null;
    private SizeMode sizeMode = SizeMode.STRETCH;
    private int newHeight, newWidth, originalHeight, originalWidth;

    public JPictureBox() {
        JPictureBox.this.setPreferredSize(dimension);
        JPictureBox.this.setOpaque(false);
        JPictureBox.this.setSizeMode(SizeMode.STRETCH);
    }
    
    public JPictureBox(ImageIcon image) {
        JPictureBox.this.setIcon(image);
        JPictureBox.this.setPreferredSize(dimension);
        JPictureBox.this.setOpaque(false);
        JPictureBox.this.setSizeMode(SizeMode.STRETCH);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (ii != null) {
            switch (getSizeMode()) {
                case NORMAL:
                    g.drawImage(image, 0, 0, ii.getIconWidth(), ii.getIconHeight(), null);
                    break;
                case ZOOM:
                    aspectRatio();
                    g.drawImage(image, 0, 0, newWidth, newHeight, null);
                    break;
                case STRETCH:
                    g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), null);
                    break;
                case CENTER:
                    g.drawImage(image, (int) (this.getWidth() / 2) - (int) (ii.getIconWidth() / 2), (int) (this.getHeight() / 2) - (int) (ii.getIconHeight() / 2), ii.getIconWidth(), ii.getIconHeight(), null);
                    break;
                default:
                    g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), null);
            }
        }
    }

    public Icon getIcon() {
        return icon;
    }

    public void setIcon(Icon icon) {
        this.icon = icon;
        ii = (ImageIcon) icon;
        image = ii.getImage();
        originalHeight = ii.getIconHeight();
        originalWidth = ii.getIconWidth();
    }

    public SizeMode getSizeMode() {
        return sizeMode;
    }

    public void setSizeMode(SizeMode sizeMode) {
        this.sizeMode = sizeMode;
    }

    public enum SizeMode {
        NORMAL,
        STRETCH,
        CENTER,
        ZOOM
    }

    private void aspectRatio() {
        if (ii != null) {
            newHeight = this.getHeight();
            newWidth = (originalWidth * newHeight) / originalHeight;
        }
    }

}

class SnowFlake {
    int x,y;
    
    static int totalFalls = 0;
    
    SnowFlake(int a, int b) {
        x=a; y=b;
    }
    
    public void fall() {
        SnowFlake.totalFalls++;
//        if(this.y >= 400) return;
        if(SnowFlake.totalFalls < 100) this.y += 10;
        else if(SnowFlake.totalFalls < 200) this.y += 20;
        else if(SnowFlake.totalFalls < 300) this.y += 30;
        else this.y += 50;
    }
    
    public void reset(int x) {
        this.x = x;
        y = 0;
    }
    
    
}

class SnowMan {
    
    static final int MAX_SNOWFLAKES_MISSED = 3;
    
    MainWindow window;
    
    int snowflakesMissed = 0;
    int snowflakesCatched = 0;
    int x,y;
    
    SnowMan(int a, int b, MainWindow window) {
        x=a; y=b;
        this.window = window;
    }
    
    public void moveLeft() {
        if(this.x <= 0) return;
        this.x -= 10;
    }
    
    public void moveRight() {
        if(this.x >= 610) return;
        this.x += 10;
    }
    
    public void catchSnowflake() {
        this.snowflakesCatched++;
       
    }
    
    public void missSnowflake() {
        this.snowflakesMissed++;
        
        if(this.snowflakesMissed >= MAX_SNOWFLAKES_MISSED) {
            _onMissMaximumSnowflakes(this);
        }
    }
    
    public boolean canCatch(SnowFlake s) {
        
        
    
        if(Math.abs(s.x - this.x) <= 22 && Math.abs(s.y - this.y) <= 22) {
            return true;
        }
        return false;
    }

    void _onMissMaximumSnowflakes(SnowMan aThis) {
        this.window.gameOver();
    }
}
